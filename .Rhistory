shiny::runApp()
runApp()
# for assymetric case
generate_dependent_X_Y_Y_Z <- function(N,abc=abc,dep) {
set.seed(12)
d <- 5
U <- runif(d*N)
# a <- c(2/3,1/12,0,1/12,1/6)
# b <- c(0,1/3,1/3,1/6,1/6)
# c <- c(0,0,1/3,1/3,1/3)
a <- abc[,1]
b <- abc[,2]
c <- abc[,3]
x_y <- evd::rbvevd(N*d,dep=dep[1],model="log")
x <- exp(x_y[,1])
Y <- exp(x_y[,2])
a <- dep[2]
# generate z
to_opt <- function(z) {
(  (  y^(-(1/a)+1)*(y^(-1/a)+z^(-1/a))^(a-1)*exp(-(y^(-1/a)+z^(-1/a))^a)*exp(1/y)  )-Unif)^2
}
z <- c()
for (i in 1:nrow(x_y)){
# generate U
Unif <- runif(1)
y <- Y[i]
# F_Y_Z <- function(z) {
#   -a *y^(-(1/a)+1)*(y^(-1/a)+z^(-1/a))^(a-1)*exp(-(y^(-1/a)+z^(-1/a))^a)
# }
z[i] <- optim(par=1,fn=to_opt)$par
}
Y <- data.frame(X_1=x,X_2=Y,X_3=z)
# generate X
X_1 <- c()
X_2 <- c()
X_3 <- c()
for (j in 1:N) {
X_1[j] <- max(Y[(d*(j-1)+1):(d*j),1]*a)
X_2[j] <- max(Y[(d*(j-1)+1):(d*j),2]*b)
X_3[j] <- max(Y[(d*(j-1)+1):(d*j),3]*c)
}
return(data.frame(X_1,X_2,X_3))
}
generate_dependent_X_Y_Y_Z(N=5000,abc=abc,dep=c(0.1,0.1)) %>% plot_clusters(u=0.9,dep=0.9)
